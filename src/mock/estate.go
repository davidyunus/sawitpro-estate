// Code generated by MockGen. DO NOT EDIT.
// Source: src/domain/estate.go
//
// Generated by this command:
//
//	mockgen -source=src/domain/estate.go -destination=src/mock/estate.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	domain "github.com/davidyunus/sawitpro-estate/src/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockEstateUsecase is a mock of EstateUsecase interface.
type MockEstateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockEstateUsecaseMockRecorder
}

// MockEstateUsecaseMockRecorder is the mock recorder for MockEstateUsecase.
type MockEstateUsecaseMockRecorder struct {
	mock *MockEstateUsecase
}

// NewMockEstateUsecase creates a new mock instance.
func NewMockEstateUsecase(ctrl *gomock.Controller) *MockEstateUsecase {
	mock := &MockEstateUsecase{ctrl: ctrl}
	mock.recorder = &MockEstateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstateUsecase) EXPECT() *MockEstateUsecaseMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockEstateUsecase) CreateEstate(ctx context.Context, param *domain.Estate) (*domain.CreateEstateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, param)
	ret0, _ := ret[0].(*domain.CreateEstateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockEstateUsecaseMockRecorder) CreateEstate(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockEstateUsecase)(nil).CreateEstate), ctx, param)
}

// GetDroneFlyingDistance mocks base method.
func (m *MockEstateUsecase) GetDroneFlyingDistance(ctx context.Context, id string, maxDistance int) (*domain.GetDroneFlyingDistanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDroneFlyingDistance", ctx, id, maxDistance)
	ret0, _ := ret[0].(*domain.GetDroneFlyingDistanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDroneFlyingDistance indicates an expected call of GetDroneFlyingDistance.
func (mr *MockEstateUsecaseMockRecorder) GetDroneFlyingDistance(ctx, id, maxDistance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDroneFlyingDistance", reflect.TypeOf((*MockEstateUsecase)(nil).GetDroneFlyingDistance), ctx, id, maxDistance)
}

// GetTreeStats mocks base method.
func (m *MockEstateUsecase) GetTreeStats(ctx context.Context, id string) (*domain.GetTreeStatsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTreeStats", ctx, id)
	ret0, _ := ret[0].(*domain.GetTreeStatsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTreeStats indicates an expected call of GetTreeStats.
func (mr *MockEstateUsecaseMockRecorder) GetTreeStats(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTreeStats", reflect.TypeOf((*MockEstateUsecase)(nil).GetTreeStats), ctx, id)
}

// PlantPalmTree mocks base method.
func (m *MockEstateUsecase) PlantPalmTree(ctx context.Context, id string, param *domain.PalmTree) (*domain.PlantPalmTreeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlantPalmTree", ctx, id, param)
	ret0, _ := ret[0].(*domain.PlantPalmTreeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlantPalmTree indicates an expected call of PlantPalmTree.
func (mr *MockEstateUsecaseMockRecorder) PlantPalmTree(ctx, id, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlantPalmTree", reflect.TypeOf((*MockEstateUsecase)(nil).PlantPalmTree), ctx, id, param)
}

// MockEstateRepository is a mock of EstateRepository interface.
type MockEstateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEstateRepositoryMockRecorder
}

// MockEstateRepositoryMockRecorder is the mock recorder for MockEstateRepository.
type MockEstateRepositoryMockRecorder struct {
	mock *MockEstateRepository
}

// NewMockEstateRepository creates a new mock instance.
func NewMockEstateRepository(ctrl *gomock.Controller) *MockEstateRepository {
	mock := &MockEstateRepository{ctrl: ctrl}
	mock.recorder = &MockEstateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEstateRepository) EXPECT() *MockEstateRepositoryMockRecorder {
	return m.recorder
}

// CreateEstate mocks base method.
func (m *MockEstateRepository) CreateEstate(ctx context.Context, param *domain.Estate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEstate", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateEstate indicates an expected call of CreateEstate.
func (mr *MockEstateRepositoryMockRecorder) CreateEstate(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEstate", reflect.TypeOf((*MockEstateRepository)(nil).CreateEstate), ctx, param)
}

// GetEstateByUuid mocks base method.
func (m *MockEstateRepository) GetEstateByUuid(ctx context.Context, id string) (*domain.Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateByUuid", ctx, id)
	ret0, _ := ret[0].(*domain.Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateByUuid indicates an expected call of GetEstateByUuid.
func (mr *MockEstateRepositoryMockRecorder) GetEstateByUuid(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateByUuid", reflect.TypeOf((*MockEstateRepository)(nil).GetEstateByUuid), ctx, id)
}
